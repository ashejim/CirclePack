package widgets;

import java.awt.Color;
import java.util.Iterator;

import javax.swing.JPanel;

import combinatorics.komplex.HalfEdge;
import exceptions.DataException;
import input.CommandStrParser;
import listManip.HalfLink;
import packing.PackData;

/**
 * A Frame for sliders controlling specified 
 * intrinsic schwarzians s for flowers -- see 
 * "flower" command in 'SchwarzMap.java'. 
 * Note: often computations use the u-variable,
 * u=1-s, see "SchFlowerData", but this slider 
 * controls s itself.
 * 
 * @author kstephe2, June 2020
 *
 */
public class SchFlowerSliders extends SliderFrame {
	
	private static final long serialVersionUID = 1L;
	
	private static final double min_s_variable=-2.0;
	private static final double max_s_variable=1.0;
			
	HalfLink hedges; // flower edges for the widget
	int root; // root face (if given) is generally laid out first  
	
	// constructors
	public SchFlowerSliders(PackData p,Double[] schval) {
		this(p,"|sm| sch -r;|sm| sch -f","",schval);
	}

	public SchFlowerSliders(PackData p,String chgcmd,
			String movcmd, Double[] schval) {
		super(p,chgcmd,movcmd);
		if (p.intNodeCount!=1) 
			throw new DataException(
				"SchFlowerSliders only works for flowers");
		
		type=SCHFLOWER;
		// if flower was generated by SchwarzMap 'flower' 
		//    command, then alpha should be the max index
		StringBuilder hls=new StringBuilder("-Iv "+packData.getAlpha());	
		hedges=new HalfLink(packData,hls.toString()); // indexed from 0
		
		// Note: schwarzians are same for edge and their twins
		sliderCount=hedges.size();
		setTitle("Schwarzians for p"+packData.packNum);
		setHelpText(new StringBuilder("These sliders control selected "
				+ "edge intrinsic schwarzians s. "
				+ "The user can specify two active command "
				+ "strings, marked 'change cmd' and 'motion cmd'. When checked to "
				+ "activate, the associated command string will be executed "
				+ "when the mouse changes a slider value or enters a slider's label, "
				+ "respectively.\n\n"
				+ "Implement with, e.g.\n\n"
				+ "sliders -S -c \"|sm| sch -f\" -m \"disp -wr -c _Obj"
				+ "\" -o \"layout\" {e...}.\n\n"
				+ "The variable 'Obj' is set to an object when the commands are "
				+ "executed."));
		mySliders=new ActiveSlider[sliderCount];
		initGUI();
		
		setChangeField(holdChangeCmd);
		setMotionField(holdMotionCmd);
	}
	
	/**
	 * Get schwarzian directly from packData
	 * @param indx int, starting at 0
	 * @return double
	 */
	public double getParentValue(int indx) {
		return packData.getSchwarzian(hedges.get(indx));
	}
	
	/**
	 * When an adjustment goes wrong, this puts an
	 * error message in the  
	 * @param errstr
	 */
	public void showSchError(String errstr) {
		if (type!=SCHFLOWER)
			return;
		
	}

	// ============= abstract methods ==================
	
	public void populate() {
		ActiveSlider[] tmpSliders = new ActiveSlider[sliderCount];
		Iterator<HalfEdge> his=hedges.iterator();
		int tick=0;
		while (his.hasNext()) {
			HalfEdge edge=his.next();
			// arrange so v < w.
			int vv=edge.origin.vertIndx;
			int ww=edge.twin.origin.vertIndx;
			if (vv>ww) {
				int hld=vv;
				vv=ww;
				ww=hld;
			}
			String str=new String(vv+" "+ww);
			double sch=getParentValue(tick);
			// only the first n-3 sliders are active
			if (tick<sliderCount-3)
				tmpSliders[tick]=
				new ActiveSlider(this,tick,str,sch,true);
			else
				tmpSliders[tick]=
				new ActiveSlider(this,tick,str,sch,false);
			tick++;
		}

		mySliders = new ActiveSlider[sliderCount-3];
		for (int j=0;j<sliderCount-3;j++) { 
			mySliders[j]=tmpSliders[j];
			sliderPanel.add(mySliders[j]);
		}
	}
	
	/**
	 * Not allowed to add any more sliders
	 */
	public int addObject(String objstr) {
		return 0;
	}
	
	/**
	 * Not allowed to remove any slider
	 */
	public int removeObject(String objstr) {
		return 0;
	}
	
	/**
	 * Get schwarzian for given edge from packData
	 * and set slider without causing change event
	 * @param indx integer
	 * @return
	 */
	public void downValue(int indx) {
		double val=getParentValue(indx);
		mySliders[indx].updateValue(val);
	}
	
	/**
	 * Stores schwarzian in packData
	 */
	public void upValue(int indx) {
		packData.setSchwarzian(hedges.get(indx),(Double)(mySliders[indx].value));
	}
	
	/**
	 * Done here in case one wants embellishments
	 */
	public void createSliderPanel() {
		sliderPanel=new JPanel();
        sliderPanel.setBackground(new Color(255,230,200));
	}
	
	public void setChangeField(String cmd) {
		changeCmdField.setText(cmd);
	}
	
	public void setMotionField(String cmd) {
		motionCmdField.setText(cmd);
	}
	
	public void setOptCmdField(String cmd) {
		optCmdField.setText(cmd);
	}
	
	public void mouse_entry_action(int indx) {
		motionAction(indx); // see if there's a motion command to execute
	}
	
	/**
	 * triggers change action
	 */
	public void changeValueField_action(double val, int indx) {
		valueField_action(val,indx);
	}

	/**
	 * Set the initial values of val_min and val_max. 
	 */
	public void initRange() {
		val_min=min_s_variable;
		val_max=max_s_variable;
	}
	
	public void killMe() {
		CommandStrParser.jexecute(packData,"slider -S -x");
	}

}

