package schwarzWork;

import java.awt.Color;
import java.util.Iterator;

import javax.swing.BoxLayout;
import javax.swing.JPanel;

import combinatorics.komplex.HalfEdge;
import complex.Complex;
import exceptions.DataException;
import geometry.CircleSimple;
import input.CommandStrParser;
import listManip.HalfLink;
import packing.PackData;
import util.xNumField;
import widgets.ActiveSlider;
import widgets.SliderFrame;

/**
 * A Frame for sliders controlling specified 
 * intrinsic schwarzians s for flowers -- see 
 * "flower" command in 'SchwarzMap.java'. 
 * Note: often computations use the u-variable,
 * u=1-s, see "SchFlowerData", but these sliders 
 * controls the s's themselves.
 * 
 * Display will also so the "errors" in the effect
 * of the current schwarzians, see 'SchFlowerData.
 * euclFlower'.
 * 
 * CAUTION: the 'errors' depend on layout process: we
 * start layout using the edge schwarzian closest to 
 * the uniform for an n-flower. Starting with a 
 * different edge could give different errors. Fortunately,
 * error = 0 is independent of layout process.
 * 
 * @author kstephe2, June 2020
 *
 */
public class SchFlowerSliders extends SliderFrame {
	
	private static final long serialVersionUID = 1L;
	
	private static final double min_s_variable=-2.0;
	private static final double max_s_variable=1.0;
	
	private xNumField angError;
	private xNumField radError;
			
	HalfLink hedges; // flower edges, indexed from 0
	public int flowerDegree;
	
	// constructors
	public SchFlowerSliders(PackData p,Double[] schval) {
		this(p,"|sm| sch -r;|sm| sch -e","",schval);
	}

	public SchFlowerSliders(PackData p,String chgcmd,
			String movcmd, Double[] schval) {
		super(p,chgcmd,movcmd);
		if (p.intNodeCount!=1) 
			throw new DataException(
				"must do 'sch flower {n}' call first");
		
		type=SCHFLOWER;
		// if flower was generated by SchwarzMap 'flower' 
		//    command, then alpha should be the max index
		StringBuilder hls=new StringBuilder("-Iv "+packData.getAlpha());	
		hedges=new HalfLink(packData,hls.toString()); // indexed from 0
		flowerDegree=hedges.size();
		
		// Note: schwarzians are same for edge and their twins
		sliderCount=flowerDegree;
		setTitle("Schwarzians for p"+packData.packNum);
		setHelpText(new StringBuilder("These sliders control selected "
				+ "edge intrinsic schwarzians s. "
				+ "The user can specify two active command "
				+ "strings, marked 'change cmd' and 'motion cmd'. When checked to "
				+ "activate, the associated command string will be executed "
				+ "when the mouse changes a slider value or enters a slider's label, "
				+ "respectively.\n\n"
				+ "Implement with, e.g.\n\n"
				+ "sliders -S -c \"|sm| sch -f\" -m \"disp -wr -c _Obj"
				+ "\" -o \"layout\" {e...}.\n\n"
				+ "The variable 'Obj' is set to an object when the commands are "
				+ "executed."));
		mySliders=new ActiveSlider[sliderCount];
		initGUI();
		
		setChangeField(holdChangeCmd);
		setMotionField(holdMotionCmd);
	}
	
	/**
	 * Get schwarzian directly from packData
	 * @param indx int, indexing starting at 0
	 * @return double
	 */
	public double getParentValue(int indx) {
		return packData.getSchwarzian(hedges.get(indx));
	}
	
	// ============= abstract methods ==================
	
	public void populate() {
		// note: sliders indexed from 0
		ActiveSlider[] tmpSliders = new ActiveSlider[sliderCount];
		Iterator<HalfEdge> his=hedges.iterator();
		int tick=0;
		while (his.hasNext() && tick<sliderCount) {
			HalfEdge edge=his.next();
			// arrange so v < w.
			int vv=edge.origin.vertIndx;
			int ww=edge.twin.origin.vertIndx;
			if (vv>ww) {
				int hld=vv;
				vv=ww;
				ww=hld;
			}
			String str=new String(vv+" "+ww);
			double sch=getParentValue(tick);
			if (tick<sliderCount)
				tmpSliders[tick]=
					new ActiveSlider(this,tick,str,sch,true);
			tick++;
		}

		mySliders = new ActiveSlider[sliderCount];
		for (int j=0;j<sliderCount;j++) { 
			mySliders[j]=tmpSliders[j];
			sliderPanel.add(mySliders[j]);
		}
	}
	
	/**
	 * Not allowed to add/remove sliders
	 */
	public int addObject(String objstr) {return 0;}
	public int removeObject(String objstr) {return 0;}
	
	/**
	 * Get schwarzian for given edge from packData
	 * and set slider without causing change event
	 * @param indx integer
	 * @return
	 */
	public void valueFromPacking(int indx) {
		double val=getParentValue(indx);
		mySliders[indx].updateValue(val);
	}
	
	/**
	 * Stores schwarzian in packData
	 */
	public void valueToPacking(int indx) {
		packData.setSchwarzian(hedges.get(indx),(Double)(mySliders[indx].value));
		this.updateErrorFields();
	}
	
	/**
	 * This is done here to embellish with displays of
	 * the "error" in radii and angle when laying out
	 * a flower.
	 */
	public void createSliderPanel() {
		sliderPanel=new JPanel();
        sliderPanel.setBackground(new Color(255,230,200));

		optionalPanel=new JPanel();
        optionalPanel.setBackground(new Color(200,230,255));
		optionalPanel.setLayout(new BoxLayout(optionalPanel,BoxLayout.LINE_AXIS));
		angError=new xNumField("angle 'error': ",7);
		radError=new xNumField("radium 'error': ",7);
		optionalPanel.add(angError);
		optionalPanel.add(radError);
	}
	
	public void setChangeField(String cmd) {
		changeCmdField.setText(cmd);
	}
	
	public void setMotionField(String cmd) {
		motionCmdField.setText(cmd);
	}
	
	public void setOptCmdField(String cmd) {
		optCmdField.setText(cmd);
	}
	
	public void mouse_entry_action(int indx) {
		motionAction(indx); // see if there's a motion command to execute
	}
	
	// recompute/display errors
	public void updateErrorFields() {
		CircleSimple cs=new CircleSimple();
		Complex err=new Complex(0.0);
		PackData.schFlowerErr(packData.packDCEL.vertices[packData.nodeCount],err,cs);
		radError.setValue(err.x);
		angError.setValue(err.y);
	}
	
	/**
	 * Triggered by value field changes, kick back
	 * to 'SliderFrame'.
	 */
	public void changeValueField_action(double val, int indx) {
		valueField_action(val,indx);
	}

	/**
	 * Set the initial values of val_min and val_max. 
	 */
	public void initRange() {
		val_min=min_s_variable;
		val_max=max_s_variable;
	}
	
	public void killMe() {
		CommandStrParser.jexecute(packData,"slider -S -x");
	}

}

